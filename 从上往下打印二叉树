//从上往下打印出二叉树的每个结点，同一层的结点按照从左到右的顺序打印。
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<queue>
using namespace std;
template<class T>
struct BinaryTreeNode
{
	BinaryTreeNode<T>* _left;
	BinaryTreeNode<T>* _right;
	T _data;
	BinaryTreeNode(const T& x)
		:_left(NULL)
		, _right(NULL)
		, _data(x)
	{}
};
template<class T>
class BinaryTree
{
public:
	BinaryTree(const T* a, size_t size, const T& invalid)
	{
		size_t index = 0;
		_root = _CreatTree(a, size, index, invalid);
	}
	void PrevOder()
	{
		_PrevOder(_root);
	}
	void PrintFromTopToBottom()
	{
		_PrintFromTopToBottom(_root);
	}
protected:
	BinaryTreeNode<T>* _CreatTree(const T* a, size_t size, size_t& index, const T& invalid)//创建树
	{
		BinaryTreeNode<T>* _root = NULL;
		if (index<size && a[index] != '#')
		{
			_root = new BinaryTreeNode<T>(a[index]);
			_root->_left = _CreatTree(a, size, ++index, invalid);  //递归创建左子树
			_root->_right = _CreatTree(a, size, ++index, invalid); //递归创建右子树
		}
		return _root;
	}
	void _PrevOder(BinaryTreeNode<T>* _root)  //前序遍历（根、左、右）
	{
		if (_root == NULL)
			return;
		cout << _root->_data << " ";
		_PrevOder(_root->_left);
		_PrevOder(_root->_right);
	}
protected:
	void _PrintFromTopToBottom(BinaryTreeNode<T>* _root)//从上往下打印二叉树
	{
		if (_root == NULL)
			return;
		queue<BinaryTreeNode<T>*> q;
		q.push(_root);
		while (q.size())
		{
			BinaryTreeNode<T>* Node = q.front();
			q.pop();
			cout << Node->_data << " ";
			//结点的子结点不为空时，将子结点放入队列
			if (Node->_left)
				q.push(Node->_left);
			if (Node->_right)
				q.push(Node->_right);
		}
	}
protected:
	BinaryTreeNode<T>* _root;
};
int main()
{
	int a1[15] = { 8, 6, 5, '#', '#', 7, '#', '#', 10, 9, '#', '#', 11  ,'#', '#' };
	BinaryTree<int> t1(a1, 15, '#');
	cout << "前序遍历：";
	t1.PrevOder();
	cout << endl;
	cout << "层序遍历：";
	t1.PrintFromTopToBottom();
	cout << endl;
	getchar();
	return 0;
}
