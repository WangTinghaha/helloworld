//输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回true,否则返回false。
//假设输入的数组的任意两个数字都互不相同。
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;
bool VerifySquenceOfBST(int* a,int size)
{
	if (a == NULL || size <= 0)
		return false;
	int root = a[size-1];//数组中最后一个数是根结点
	int i = 0;
	//确定二叉搜索树的左子树，左子树的结点小于根结点
	for (i = 0; i < size - 1;++i)
	{
		if (a[i]>root)
			break;
	}
	//确定二叉搜索树的右子树，右子树的结点大于根结点
	int j = i;
	for (j = i; j < size - 1;++j)
	{
		if (a[j] < root)
			return false;
	}
	//判断左子树是不是二叉搜索树
	bool left = true;
	if (i>0)
	{
		left = VerifySquenceOfBST(a,i);
	}
	//判断右子树是不是二叉搜索树
	bool right = true;
	if (i <size-1)
	{
		right = VerifySquenceOfBST(a + i,size-1);
	}
	return (left&&right);
}
int main()
{
	int a[] = { 5, 7, 6, 9, 11, 10, 8 };
	int size = sizeof(a) / sizeof(a[0]);
	cout<<VerifySquenceOfBST(a,size);
	getchar();
	return 0;
}
