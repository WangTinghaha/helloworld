//输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;
//数组下标写法
void ReOrderOddEven(int* a,int size)
{
	if (a == NULL || size <= 0)
	{
		return;
	}
	int left=0;
	int right = size - 1;
	while (left<right)
	{
		while (left < right&&(a[left] & 0x1 )== 1)//向后移动left，直到指向偶数
		{
			left++;
		}
		while (left < right&&(a[right] & 0x1 )!= 1)//向后移动right，直到指向奇数
		{
			right--;
		}
		if (left<right)
		{
			int tmp = a[left];
			a[left] = a[right];
			a[right] = tmp;
		}
	}
}
//两个指针写法
void ReOrderOddEven1(int* a, int size)
{
	if (a == NULL || size <= 0)
	{
		return;
	}
	int *left = a;
	int *right = a+size - 1;
	while (left<right)
	{
		while (left < right && (*left & 0x1) == 1)//向后移动left，直到指向偶数
		{
			left++;
		}
		while (left < right && (*right & 0x1) != 1)//向后移动right，直到指向奇数
		{
			right--;
		}
		if (left<right)
		{
			int tmp = *left;
			*left = *right;
			*right = tmp;
		}
	}
}
//更具扩展性的写法
void ReOrder(int* a, int size,bool(*func)(int))
{
	/*int size = sizeof(a) / sizeof(a[0]);*/
	if (a == NULL || size <= 0)
	{
		return;
	}
	int *left = a;
	int *right = a + size - 1;
	while (left<right)
	{
		while (left < right && !func(*left))
		{
			left++;
		}
		while (left < right && func(*right))
		{
			right--;
		}
		if (left<right)
		{
			int tmp = *left;
			*left = *right;
			*right = tmp;
		}
	}
}
bool isEven(int n)
{
	return (n & 1) == 0;
}
void ReOrderOddEven2(int* a,int size)
{
	ReOrder(a, size, isEven);
}
int main()
{
	int a[] = {1,2,3,4,5};
	int size = sizeof(a) / sizeof(a[0]);
	ReOrderOddEven(a,size);
	for (int i = 0; i < size;++i)
	{
		cout << a[i];
	}
	cout << endl;
	ReOrderOddEven1(a, size);
	for (int i = 0; i < size; ++i)
	{
		cout << a[i];
	}
	cout << endl;
	ReOrderOddEven2(a, size);
	for (int i = 0; i < size; ++i)
	{
		cout << a[i];
	}
	getchar();
	return 0;
}
