//实现函数double Power(double base,int exponent),求base的exponent次方。
//不得使用库函数，同时不需要考虑大数问题。
#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

//输入的指数仅为正数的实现方法
double Power1(double base, int exponent)
{
	double data = base;
	double n = exponent;
	double result = 1;
	while (n)
	{
		result *= data;
		n--;
	}
	return result;
}

//指数包括正数、负数、0的时候的实现方法
bool InvalidInput = false;//定义全局变量判断输入是否合法
double PowerWithUnsignedExponent(double base, unsigned int exponent)
{
	double data = base;
	unsigned int n = exponent;
	double result = 1.0;
	while (n)
	{
		result *= data;
		n--;
	}
	return result;
}
bool equal(double num1, double num2)
{
	if ((num1 - num2>-0.0000001) && (num1 - num2 < 0.0000001))
		return true;
	else
		return false;
}
double Power2(double base, int exponent)
{
	InvalidInput = false;
	if (equal(base,0.0)&&exponent<0)//出现0的负数次方
	{
		InvalidInput = true;
		return 0.0;
	}
	unsigned int absExponent = (unsigned int)exponent;
	if (exponent<0)
		absExponent = (unsigned int)(-exponent);//指数为负数时，取绝对值
	double result = PowerWithUnsignedExponent(base, absExponent);
	if (exponent<0)
		result = 1.0 / result;
	return result;
}

//高效的解法
double PowerWithUnsignedExponent1(double base, unsigned int exponent)
{
	if (exponent == 0)
		return 1;
	if (exponent == 1)
		return base;
	double result = PowerWithUnsignedExponent1(base, exponent >> 1);
	result *= result;
	if (exponent & 0x1 == 1)
		result *= base;
	return result;
}
int main()
{
	double ret1 = Power1(3,3);
	cout << ret1 << endl;
	double ret2 = Power2(0,-2);
	cout << ret2 << endl;
	getchar();
	return 0;
}
