//输入一棵二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。
//从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。
#define _CRT_SECURE_NO_WARNINGS 1
#include<vector>
#include<iostream>
using namespace std;
template<class T>
struct BinaryTreeNode
{
	BinaryTreeNode<T>* _left;
	BinaryTreeNode<T>* _right;
	T _data;
	BinaryTreeNode(const T& x)
		:_left(NULL)
		, _right(NULL)
		, _data(x)
	{}
};
template<class T>
class BinaryTree
{
public:
	BinaryTree(const T* a, size_t size, const T& invalid)
	{
		size_t index = 0;
		_root = _CreatTree(a, size, index, invalid);
	}
	void PrevOder()
	{
		_PrevOder(_root);
	}
	void FindPath()
	{
		_FindPath(_root,22);
	}
protected:
	BinaryTreeNode<T>* _CreatTree(const T* a, size_t size, size_t& index, const T& invalid)//创建树
	{
		BinaryTreeNode<T>* _root = NULL;
		if (index<size && a[index] != '#')
		{
			_root = new BinaryTreeNode<T>(a[index]);
			_root->_left = _CreatTree(a, size, ++index, invalid);  //递归创建左子树
			_root->_right = _CreatTree(a, size, ++index, invalid); //递归创建右子树
		}
		return _root;
	}
	void _PrevOder(BinaryTreeNode<T>* _root)  //前序遍历（根、左、右）
	{
		if (_root == NULL)
			return;
		cout << _root->_data << " ";
		_PrevOder(_root->_left);
		_PrevOder(_root->_right);
	}
	void Findpath(BinaryTreeNode<T>* _root, int expectedSum,
		          vector<int>& path,int& currentSum)
	{
		currentSum += _root->_data;
		path.push_back(_root->_data);
		//如果是叶结点，并且路径上结点的和等于输入的值时打印出这条路径
		bool IsLeaf = _root->_left == NULL&&_root->_right == NULL;
		if (currentSum==expectedSum&&IsLeaf)
		{
			cout << "二叉树中和为22的路径是：";
			vector<int>::iterator iter = path.begin();
			for (; iter != path.end(); ++iter)
				cout << *iter << " ";
			cout << endl;
		}
		//如果不是叶结点，则遍历它的子结点
		if (_root->_left != NULL)
			Findpath(_root->_left,expectedSum,path,currentSum);
		if (_root->_right != NULL)
			Findpath(_root->_right, expectedSum, path, currentSum);
		//返回父结点之前，在路径上删除当前结点，并在currentSum中减去当前结点的值
		currentSum -= _root->_data;
		path.pop_back();
	}
	void _FindPath(BinaryTreeNode<T>* _root,int expectedSum)
	{
		if (_root == NULL)
			return;
		vector<int> path;
		int currentSum = 0;//当前值的和
		Findpath(_root, expectedSum, path, currentSum);
	}
protected:
	BinaryTreeNode<T>* _root;
};
int main()
{
	int a1[11] = { 10, 5, 4, '#', '#', 7, '#', '#', 12, '#', '#' };
	BinaryTree<int> t1(a1, 11, '#');
	cout << "二叉树的前序遍历结果是：";
	t1.PrevOder();
	cout << endl;
	t1.FindPath();
	cout << endl;
	getchar();
	return 0;
}
